@page "/cadastros/transportadoras"

@inject ITransportadoraService TransportadoraService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Transportadoras</PageTitle>

<MudPaper Class="pa-4">
    <MudStack Row Justify="space-between" AlignItems="center">
        <MudText Typo="Typo.h6">Transportadoras</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Novo">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" /> Nova Transportadora
        </MudButton>
    </MudStack>

    <MudTable Items="_transportadoras" Hover="true" Dense="true">
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>CNPJ</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Telefone</MudTh>
            <MudTh>Ações</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Nome</MudTd>
            <MudTd>@context.Cnpj</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.Telefone</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => Editar(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => Excluir(context.Id))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<TransportadoraDto> _transportadoras = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregarTransportadoras();
    }

    private async Task CarregarTransportadoras()
    {
        _transportadoras = await TransportadoraService.ListarAsync();
    }

    private void Novo()
    {
        // Navegar para página de criação
        // NavigationManager.NavigateTo("/cadastros/transportadoras/nova");
        Snackbar.Add("Funcionalidade de criação ainda não implementada.", Severity.Info);
    }

    private void Editar(Guid id)
    {
        // Navegar para página de edição
        // NavigationManager.NavigateTo($"/cadastros/transportadoras/editar/{id}");
        Snackbar.Add("Funcionalidade de edição ainda não implementada.", Severity.Info);
    }

    private async Task Excluir(Guid id)
    {
        var transportadora = _transportadoras.FirstOrDefault(t => t.Id == id);
        if (transportadora is null)
        {
            Snackbar.Add("Transportadora não encontrada.", Severity.Error);
            return;
        }

        var result = await DialogService.ShowMessageBox(
            "Confirmação",
            $"Deseja realmente excluir a transportadora '{transportadora.Nome}'?",
            yesText: "Sim",
            noText: "Não"
        );

        if (result == true)
        {
            var sucesso = await TransportadoraService.RemoverAsync(id);
            if (sucesso)
            {
                Snackbar.Add("Transportadora excluída com sucesso.", Severity.Success);
                await CarregarTransportadoras();
            }
            else
            {
                Snackbar.Add("Erro ao excluir transportadora.", Severity.Error);
            }
        }
    }
}
