@page "/cadastros/transportadoras"
@using Vasis.Erp.Facil.Shared.Entities.Cadastros
@inject HttpClient Http
@inject NavigationManager Navigation

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">Transportadoras</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Nova" Class="mb-2">
        Nova Transportadora
    </MudButton>

    <MudTable Items="_lista" Hover="true">
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>CNPJ</MudTh>
            <MudTh>Ações</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nome">@context.Nome</MudTd>
            <MudTd DataLabel="CNPJ">@context.Cnpj</MudTd>
            <MudTd>
                <MudIconButton Icon="Edit" Color="Color.Primary" OnClick="@(() => Editar(context.Id))" />
                <MudIconButton Icon="Delete" Color="Color.Error" OnClick="@(() => Excluir(context.Id))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<Transportadora> _lista = [];

    protected override async Task OnInitializedAsync()
    {
        _lista = await Http.GetFromJsonAsync<List<Transportadora>>("api/transportadora") ?? [];
    }

    void Nova() => Navigation.NavigateTo("/cadastros/transportadoras/nova");

    void Editar(Guid id) => Navigation.NavigateTo($"/cadastros/transportadoras/{id}");

    async Task Excluir(Guid id)
    {
        if (await JsConfirmar("Deseja excluir esta transportadora?"))
        {
            await Http.DeleteAsync($"api/transportadora/{id}");
            _lista = await Http.GetFromJsonAsync<List<Transportadora>>("api/transportadora") ?? [];
        }
    }

    async Task<bool> JsConfirmar(string msg)
        => await Task.FromResult(confirm(msg)); // substitua por diálogo real se desejar
}
